{"version":3,"sources":["images/background_image.png","components/SubmitUser.js","components/CreateRoom.js","sketches/DrawWithFriends.js","components/SignUp.js","components/Login.js","sketches/PongWithFriends.js","components/Slider.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","CreateRoom","props","getUser","a","fetch","method","headers","Authorization","localStorage","getItem","getUserResponse","json","getUserJsonRes","username","console","log","setState","roomAndUsers","state","user","handleSubmit","event","preventDefault","roomResponse","isCreateRoom","body","JSON","stringify","roomName","room","roomJsonRes","setUserAndRoom","handleChange","target","value","onSubmit","this","TextField","type","name","placeholder","onChange","required","Button","id","onClick","Styles","styled","div","color","sliderThumbStyles","pageStyle","height","display","gridTemplateColumns","canvasStyle","gridRowStart","gridColumnEnd","colSlider","background","DrawWithFriends","sender","showForm","isConnected","colorValue","brushRadius","setupBeforeUnloadListener","window","addEventListener","ev","disconnect","returnValue","ws","stompClient","topic","currentSubscription","p","p5","joinRoom","SockJS","Stomp","over","connect","onConnected","leaveRoom","enterRoom","unsubscribe","subscribe","onMessageReceived","send","onDisconnected","message","messageDat","parse","newDrawing","usr","canvasWidth","windowWidth","canvasHeight","windowHeight","setup","parent","createCanvas","HUEtoRGB","H","R","Math","abs","G","B","max","min","messageContent","data","content","mouseX","mouseY","r","g","b","noStroke","fill","ellipse","mouseDragged","fillCol","parseInt","handleColorChange","e","handleRadiusChange","style","justifyContent","alignItems","CircularProgress","className","step","draw","SignUp","email","password","signUpResponse","signUpJsonRes","setItem","token","history","push","response","clear","alert","password_confirmation","withRouter","alignContent","backgroundSize","backgroundImage","Background","buttonStyle","margin","formStyle","Login","loginResponse","loginJsonRes","handleClick","showLogin","loginForm","signUpForm","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbc58343.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background_image.df8f719e.png\";","import React, { Component } from 'react'\n\nclass SubmitUser extends Component {\n    state = {\n      user: { name: '', password: '', room: ''}\n    }\n    handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(this.state.user)\n        this.props.submitUser(this.state.user)\n    }\n\n\n    render () {\n        return (\n        <div>\n            <form onSubmit={this.handleSubmit}>\n              <div>\n              <p style={{margin: 0}} htmlFor=\"name\">Username</p>\n                <input\n                  name=\"name\"\n                  type=\"text\"\n                  value={this.state.user.name}\n                  onChange = {(e) => this.setState({ user: { ...this.state.user, name: e.target.value} })}\n                  />\n              </div>\n              <div>\n              <p style={{margin: 0}} htmlFor=\"password\">Password</p>\n                <input\n                  name=\"password\"\n                  type=\"password\"\n                  value={this.state.user.password}\n                  onChange = {(e) => this.setState({ user: { ...this.state.user, password: e.target.value} })}\n                  />\n              </div>\n              <div>\n              <p style={{margin: 0}} htmlFor=\"roomId\">Room</p>\n                <input\n                  value={this.state.user.room}\n                  name=\"room\"\n                  type=\"text\"\n                  onChange = {(e) => this.setState({user: { ...this.state.user, room: e.target.value} })}\n\n                  />\n              </div>\n              <div>\n                <input type=\"submit\" value=\"submit user\"/>\n              </div>\n            </form>\n        </div>\n        )\n    }\n}\n\nexport default SubmitUser;","import React, {Component} from 'react'\nimport {Button, Input, TextField} from \"@material-ui/core\";\n\n\nclass CreateRoom extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            roomAndUsers: {\n                user: '',\n                room: ''\n            },\n            isCreateRoom: true\n        }\n    }\n\n    getUser = async () => {\n\n        try {\n            const getUserResponse = await fetch(`/user`, {\n                method: \"get\",\n                headers: {\n                    Authorization: \"Bearer \" + localStorage.getItem(\"user\"),\n                    // \"Content-Type\": \"application/json\"\n                }\n            })\n\n            const getUserJsonRes = await getUserResponse.json();\n            const username = getUserJsonRes.username\n            console.log(\"the user is: \" + username);\n            this.setState({roomAndUsers: {...this.state.roomAndUsers, user: username}});\n        } catch (error) {\n            console.log('Error creating new Course!')\n            console.log(error)\n        }\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        this.getUser();\n        let roomResponse = null;\n        try {\n            if (this.state.isCreateRoom) {\n                roomResponse = await fetch(`game-room/create`, {\n                    method: \"post\",\n                    headers: {\n                        Authorization: \"Bearer \" + localStorage.getItem(\"user\"),\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        roomName: this.state.roomAndUsers.room\n                    })\n                })\n            } else {\n                roomResponse = await fetch(`game-room/join-${this.state.roomAndUsers.room}`, {\n                    method: \"post\",\n                    headers: {\n                        Authorization: \"Bearer \" + localStorage.getItem(\"user\"),\n                        'Content-Type': 'application/json'\n                    }\n                })\n            }\n\n            const roomJsonRes = await roomResponse.json();\n            // localStorage.setItem('user', roomJsonRes.token);\n            console.log(roomJsonRes);\n            // if (roomJsonRes.token != null) {\n            //     console.log(\"signup success!\")\n            // } else {\n            //     localStorage.clear();\n            //     alert('please enter valid user info');\n            // }\n\n        } catch (error) {\n            console.log('Error creating new Course!')\n            console.log(error)\n        }\n        this.props.setUserAndRoom(this.state.roomAndUsers)\n    }\n    handleChange = (event) => {\n        console.log(\"event\");\n        this.setState({roomAndUsers: {...this.state.roomAndUsers, room: event.target.value}});\n        // this.setState({[event.target.name]: event.target.value})\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <TextField\n                        type=\"text\"\n                        name=\"room\"\n                        placeholder=\"room\"\n                        value={this.state.roomAndUsers.room}\n                        onChange={this.handleChange}\n                        required\n                    />\n\n                    <Button id='create-toggle' type='submit'\n                            onClick={() => this.setState({isCreateRoom: true})}>create </Button>\n                    <Button id='join-toggle' type='submit'\n                            onClick={() => this.setState({isCreateRoom: false})}>join</Button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default CreateRoom;","import React, {Component} from \"react\";\nimport Sketch from \"react-p5\";\nimport p5 from 'p5';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport SubmitUser from \"../components/SubmitUser\";\nimport CreateRoom from \"../components/CreateRoom\";\nimport styled from 'styled-components';\nimport { template } from \"@babel/core\";\n\nconst sliderThumbStyles = (props) => (`\n  width: 1.5em;\n  height: 1.5em;\n  background: ${props.color};\n  cursor: pointer;\n  -webkit-transition: .2s;\n  transition: opacity .2s;\n`);\n\n\nconst Styles = styled.div`\n  display: grid;\n  color: #FFF;\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n  .value {\n    justify-self: center;\n    font-family: Sans-serif;  \n    font-size: 1.5rem;\n    margin : .5em;\n  }\n  .slider {\n    justify-self: center;\n    -webkit-appearance: none;\n    width: 75%;\n    height: .4em;\n    border-radius: 1em;\n    background: #cdcdcd\n    outline: none;\n    &::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      appearance: none;\n      ${props => sliderThumbStyles(props)}\n    }\n  }\n\n`;\n\nconst pageStyle = {\n    height: '100vh',\n    display: 'grid',\n    gridTemplateColumns: 1,\n    gridTemplateColumns: '85% 15%',\n    background: '#656565'\n    \n}\n\nconst canvasStyle = {\n    gridRowStart: 1,\n    gridColumnEnd: 2\n}\n\nconst colSlider = {\n    height: '15%', \n    background: 'linear-gradient(to right, red, orange, yellow, lime,Turquoise,Cyan, Blue, Violet, Crimson,red)'\n}\n\nclass DrawWithFriends extends Component {\n    state = {\n        sender: '',\n        room: '',\n        showForm: true,\n        isConnected: false,\n        colorValue: .7,\n        brushRadius: 10\n    };\n    setupBeforeUnloadListener = () => {\n        window.addEventListener(\"beforeunload\", (ev) => {\n            ev.preventDefault();\n            const confirmationMessage = 'you are now leaving'\n            this.disconnect(ev);\n            ev.returnValue = confirmationMessage\n            return confirmationMessage;\n        });\n    };\n\n    componentDidMount() {\n        this.setupBeforeUnloadListener();\n    }\n\n    componentWillUnmount() {\n      this.setupBeforeUnloadListener();\n    }\n\n\n    ws = null;\n    stompClient = null;\n    topic = null;\n    currentSubscription = null;\n    p = new p5();\n\n    joinRoom = async () => {\n        try {\n            const joinRoomResponse = await fetch(`/game-room/join-${this.state.room}`,\n                {\n                    method: \"post\",\n                    headers: {\n                        Authorization: \"Bearer \" + localStorage.getItem(\"user\"),\n                        \"Content-Type\": \"application/json\"\n                    }\n                })\n            this.ws = new SockJS(\"/play\");\n            this.stompClient = Stomp.over(this.ws);\n            this.stompClient.connect({}, this.onConnected)\n        } catch (error) {\n            console.log('Error joining room!')\n            console.log(error)\n        }\n    }\n\n    leaveRoom = async () => {\n        try {\n            const leaveRoomResponse = await fetch(`/game-room/leave`,\n                {\n                    method: \"post\",\n                    headers: {\n                        Authorization: \"Bearer \" + localStorage.getItem(\"user\"),\n                        \"Content-Type\": \"application/json\"\n                    }\n                })\n        }catch (e) {\n            console.log('Error leaving room!');\n            console.log(e);\n        }\n    }\n\n    enterRoom = () => {\n        const username = this.state.name;\n        this.topic = `/app/game/${this.state.room}`;\n        if (this.currentSubscription) {\n            this.currentSubscription.unsubscribe();\n        }\n        this.currentSubscription = this.stompClient.subscribe(`/topic/${this.state.room}`, this.onMessageReceived);\n\n        this.stompClient.send(`${this.topic}/addUser`, {}, JSON.stringify({sender: username, type: 'JOIN'}));\n        this.setState({isConnected: true})\n\n    }\n\n    onConnected = () => {\n        this.enterRoom();\n    }\n\n    disconnect = (event) => {\n        if (this.stompClient !== null) {\n            this.leaveRoom();\n            console.log(\"left room\");\n            // Tell your username to the server\n            this.currentSubscription = this.stompClient.subscribe(`/topic/${this.state.room}`, this.onMessageReceived);\n\n            this.stompClient.send(`${this.topic}/addUser`, {}, JSON.stringify({sender: this.state.name, type: 'LEAVE'}));\n            this.setState({isConnected: false})\n            this.stompClient.disconnect({}, this.onDisconnected);\n        }\n        event.preventDefault();\n\n    }\n\n    onDisconnected = () => {\n        this.leaveRoom();\n        console.log(\"left room\");\n        // Tell your username to the server\n        this.currentSubscription = this.stompClient.subscribe(`/topic/${this.state.room}`, this.onMessageReceived);\n\n        this.stompClient.send(`${this.topic}/addUser`, {}, JSON.stringify({sender: this.state.name, type: 'LEAVE'}));\n        this.setState({isConnected: false})\n    }\n\n    onMessageReceived = (message) => {\n        const messageDat = JSON.parse(message.body);\n        console.log(\"the sender: \" + messageDat.sender)\n        if ((messageDat.sender !== this.state.sender) && messageDat.type === 'CHAT') {\n            this.newDrawing(messageDat);\n        }\n        console.log(\"received: \" + messageDat)\n    }\n\n    setUserAndRoom = (usr) => {\n        // this.login(usr);\n        console.log(\"the set data:\" + usr.user);\n        this.setState({\n            sender: usr.user,\n            room: usr.room,\n            showForm: false\n        }, () => {\n            const username = this.state.sender;\n            this.joinRoom();\n            // if (username) {\n\n            // }\n        })\n    }\n\n    canvasWidth = 0.8365*this.p.windowWidth;\n    canvasHeight = this.p.windowHeight;\n    setup = (p5, parent) => {\n        this.p.createCanvas(this.canvasWidth, this.canvasHeight).parent(parent);\n        this.p.background(51);\n        // const slider = this.p.createSlider(0, 255, 100);\n\n        // const color_picker = this.p.createColorPicker(\"green\").parent(parent);\n\n    }\n    HUEtoRGB = (H) => {\n        let R = Math.abs(H * 6.0 - 3.0) - 1.0;\n        let G = 2.0 - Math.abs(H * 6.0 - 2.0);\n        let B = 2.0 - Math.abs(H * 6.0 - 4.0);\n        return [Math.max(0, Math.min(255, R*255)),\n            Math.max(0, Math.min(255, G*255)),\n            Math.max(0, Math.min(255, B*255))];\n    }\n\n\n    newDrawing = (messageContent) => {\n        const data = JSON.parse(messageContent.content)\n        console.log(\"the sender is: \" + this.state.sender);\n        console.log(\"the data:\" + data.mouseX)\n        console.log(\"the data:\" + data.mouseY)\n        console.log(\"the data r,g,b: \" + data.r + \" \" + data.g + \" \" + data.b)\n        this.p.noStroke();\n        this.p.fill(data.r, data.g, data.b)\n        this.p.ellipse(data.mouseX, data.mouseY, data.brushRadius, data.brushRadius);\n    }\n\n    mouseDragged = (p5) => {\n        console.log('sending: ' + this.p.mouseX + ',' + this.p.mouseY);\n        const fillCol = this.HUEtoRGB(this.state.colorValue);\n        const r = fillCol[0];\n        const g = fillCol[1];\n        const b = fillCol[2];\n        const data = {\n            sender: this.state.sender,\n            content: JSON.stringify({\n                r: parseInt(r),\n                g: parseInt(g),\n                b: parseInt(b),\n                mouseX: parseInt(this.p.mouseX),\n                mouseY: parseInt(this.p.mouseY),\n                brushRadius: parseInt(this.state.brushRadius)\n            }),\n            type: 'CHAT'\n        }\n        if(this.p.mouseX >= 0 && this.p.mouseY >= 0){\n            console.log(\"the mouse position X: \"+ this.p.mouseX +\" is less than \" +this.canvasWidth);\n            console.log(\"the mouse position Y: \"+ this.p.mouseY +\" is less than \" +this.canvasHeight);\n            if(this.p.mouseX<this.canvasWidth && this.p.mouseY < this.canvasHeight)\n                this.stompClient.send(`${this.topic}/sendMessage`, {}, JSON.stringify(data))\n        }\n        this.p.noStroke();\n        this.p.fill(r, g, b);\n        this.p.ellipse(parseInt(this.p.mouseX), parseInt(this.p.mouseY), parseInt(this.state.brushRadius), parseInt(this.state.brushRadius));\n\n    }\n\n    handleColorChange = (e) => {\n        this.setState({colorValue: e.target.value})\n    }\n\n    handleRadiusChange = (e) => {\n        this.setState( {brushRadius: e.target.value})\n    }\n\n\n\n    render() {\n        const form = (\n            <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh'}}>\n                <CreateRoom setUserAndRoom={this.setUserAndRoom}/>\n            </div>\n        )\n        const loading = (\n            <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh'}}>\n                <CircularProgress/>\n            </div>\n        )\n        const canvas = (\n            <div style={pageStyle}>\n                <div>\n                    <Styles color ={`rgb(${this.HUEtoRGB(this.state.colorValue)[0]},${this.HUEtoRGB(this.state.colorValue)[1]},${this.HUEtoRGB(this.state.colorValue)[2]})`}>\n                    <div className=\"value\">color slider</div>\n                        <input style = {colSlider} type='range' min={0} step={0.001} max={1} className='slider col-slider' value={this.state.colorValue} onChange={this.handleColorChange}/>\n                    </Styles>\n                    <Styles color={'#333'}>\n                        <div className=\"value\">brush radius: {this.state.brushRadius}px</div>\n                        <input type='range' min={1} max={50} className='slider brush-rad' value={this.state.brushRadius} onChange={this.handleRadiusChange}/>\n                    </Styles>\n                </div>\n                <Sketch style = {canvasStyle} setup={this.setup} draw={this.draw} mouseDragged={this.mouseDragged} />\n            </div>\n        )\n        // return (this.state.showForm ? form : (this.state.isConnected) ? canvas : loading)\n            return canvas;\n    }\n}\n\nexport default DrawWithFriends;","import React, { Component } from 'react';\nimport {TextField, Input, Button } from '@material-ui/core';\nimport {\n    withRouter\n  } from 'react-router-dom'\n\n\nclass SignUp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            email: '',\n            password: '',\n            password_confirmation: ''\n        }\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        try {\n            const signUpResponse = await fetch(`/signup`, {\n                method: \"post\",\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    email: this.state.email,\n                    password: this.state.password\n                })\n            })\n\n            const signUpJsonRes = await signUpResponse.json();\n            localStorage.setItem('user', signUpJsonRes.token);\n            console.log(signUpJsonRes);\n            if (signUpJsonRes.token != null) {\n                console.log(\"signup success!\")\n                this.props.history.push('/draw-wf')\n            } else if(signUpJsonRes.response==500){\n                localStorage.clear();\n                alert('there is already a user with that name');\n            } else{\n                localStorage.clear();\n                alert('an unrecognized error has occured, please try again')\n            }\n\n        } catch (error) {\n            this.props.history.push('/draw-wf')\n            console.log(error)\n        }\n    }\n    handleChange = (event) => {\n        console.log(\"event\");\n        this.setState({[event.target.name] : event.target.value})\n    }\n\n    render() {\n        return (\n            <div>\n                    <form onSubmit={this.handleSubmit}>\n                        <TextField\n                            type=\"email\"\n                            name=\"email\"\n                            placeholder=\"Email\"\n                            value={this.state.email}\n                            onChange={this.handleChange}\n                            required\n                        />\n                        <br />\n                        <TextField\n                            type=\"text\"\n                            name=\"username\"\n                            placeholder=\"username\"\n                            value={this.state.username}\n                            onChange={this.handleChange}\n                            required\n                        />\n                        <br />\n                        <TextField\n                            type=\"password\"\n                            name=\"password\"\n                            placeholder=\"password\"\n                            value={this.state.password}\n                            onChange={this.handleChange}\n                            required\n                        />\n                        <br />\n                        <TextField\n                            type=\"password\"\n                            name=\"password_confirmation\"\n                            placeholder=\"confirm password\"\n                            value={this.state.password_confirmation}\n                            onChange={this.handleChange}\n                            required\n                        />\n                        <br />\n                        <Button type=\"submit\">sign up!</Button>\n\n                    </form>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    margin: 15,\n};\nexport default withRouter(SignUp);","import React, {Component} from \"react\";\nimport SignUp from \"./SignUp\";\nimport Background from '../images/background_image.png';\nimport {TextField, Input, Button} from '@material-ui/core';\n\nconst pageStyle = {\n    display: 'grid',\n    alignContent: 'center',  \n    justifyContent: 'center', \n    height: '100vh',\n    backgroundSize: 'contain',\n    // backgroundRepeat: 'no-repeat',\n    // objectFit: 'cover',\n    backgroundImage: `url(${Background})`\n\n}\n\nconst buttonStyle = {\n    // justifySelf: 'center',\n    margin: 0\n}\n\nconst formStyle = {\n    margin: 0\n    // alignSelf: 'center'\n}\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            password: '',\n            showLogin: true\n        }\n    }\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        try {\n            const loginResponse = await fetch(`/login`, {\n                method: \"post\",\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    password: this.state.password,\n                })\n            })\n\n            const loginJsonRes = await loginResponse.json();\n            localStorage.setItem('user', loginJsonRes.token);\n            console.log(loginJsonRes.token);\n            if (loginJsonRes.token != null) {\n                console.log(\"login success!\")\n                this.props.history.push('/draw-wf')\n            } else {\n                localStorage.clear();\n                alert('please enter valid user info');\n            }\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    handleChange = (event) => {\n        console.log(\"event\");\n        this.setState({[event.target.name]: event.target.value})\n    }\n    handleClick = (event) =>{\n        event.preventDefault();\n        console.log(event.target.id)\n        if(event.target.id==='login-toggle'){\n            this.setState({showLogin: true});\n        }else if(event.target.id==='signup-toggle'){\n            this.setState({showLogin: false});\n        }\n    }\n\n    render() {\n        const loginForm = (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <TextField\n                        type=\"text\"\n                        name=\"username\"\n                        placeholder=\"username\"\n                        value={this.state.username}\n                        onChange={this.handleChange}\n                        required\n                    />\n                    <br />\n                    <TextField\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"password\"\n                        value={this.state.password}\n                        onChange={this.handleChange}\n                        required\n                    />\n                    <br />\n                    <Button type=\"submit\">login!</Button>\n                </form>\n            </div>\n        );\n        const signUpForm = <SignUp />\n        return (\n            <div style={pageStyle} className = 'form-style'>\n                <div>    \n                    <Button style={buttonStyle} id='login-toggle' onClick={() => this.setState({showLogin: true})}>Login </Button>\n                    <Button style={buttonStyle} id='signup-toggle' onClick={() => this.setState({showLogin: false})}>Sign Up</Button>\n                </div>\n                <div style={formStyle}>\n                    {this.state.showLogin ? loginForm: signUpForm}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst style = {\n    margin: 15,\n};\n\nexport default Login;","import React, {Component} from \"react\";\nimport P5Wrapper from 'react-p5-wrapper';\nimport Sketch from \"react-p5\";\nimport p5 from 'p5';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport CreateRoom from \"../components/CreateRoom\";\n\nclass PongWithFriends extends Component {\n    state = {\n        sender: '',\n        room: '',\n        isPlayer2: true,\n        showForm: true,\n        isConnected: false,\n    };\n    numUsers;\n    ws = null;\n    stompClient = null;\n    topic = null;\n    currentSubscription = null;\n    p = new p5();\n\n\n    setupBeforeUnloadListener = () => {\n        window.addEventListener(\"beforeunload\", (ev) => {\n            ev.preventDefault();\n            const confirmationMessage = 'you are now leaving'\n            this.disconnect(ev);\n            ev.returnValue = confirmationMessage\n            return confirmationMessage;\n        });\n    };\n\n    componentDidMount() {\n        this.setupBeforeUnloadListener();\n    }\n\n    componentWillUnmount() {\n        this.setupBeforeUnloadListener();\n    }\n\n    setUserAndRoom = (usr) => {\n        // this.login(usr);\n        console.log(\"the set data:\" + usr.user);\n        this.setState({\n            sender: usr.user,\n            room: usr.room,\n            showForm: false\n        }, () => {\n            const username = this.state.sender;\n            this.joinRoom();\n        })\n    }\n\n    getRoomDetails = async () => {\n        try {\n            const roomDetailsResponse = await fetch(`/game-room/${this.state.room}-details`,\n                {\n                    method: 'get',\n                    headers: {\n                        Authorization: \"Bearer \" + localStorage.getItem(\"user\"),\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n            const roomDetailsJson = await roomDetailsResponse.json()\n            console.log(roomDetailsJson)\n            this.numUsers = roomDetailsJson.userCount;\n            if (this.numUsers < 1) {\n                this.setState({isPlayer2: false})\n            }\n            console.log(this.numUsers)\n            if(this.numUsers==2){\n                this.setState({hasBothPlayers: true})\n                this.ws = new SockJS(\"/play\");\n                this.stompClient = Stomp.over(this.ws);\n                this.stompClient.connect({}, this.onConnected)\n            }\n        }\n         catch (e) {\n            console.log('error obtaining room details')\n            console.log(e)\n        }\n    }\n\n    joinRoom = async () => {\n        try {\n            const joinRoomResponse = await fetch(`/game-room/join-${this.state.room}`,\n                {\n                    method: \"post\",\n                    headers: {\n                        Authorization: \"Bearer \" + localStorage.getItem(\"user\"),\n                        \"Content-Type\": \"application/json\"\n                    }\n                })\n            this.getRoomDetails();\n\n        } catch (error) {\n            console.log('Error joining room!')\n            console.log(error)\n        }\n    }\n\n    onConnected = () => {\n        this.enterRoom();\n    }\n\n    onMessageReceived = (message) => {\n        const messageDat = JSON.parse(message.body);\n        console.log(\"the sender: \" + messageDat.sender)\n        if ((messageDat.sender !== this.state.sender) && messageDat.type === 'CHAT') {\n            this.updateMovements(messageDat);\n        }\n        console.log(\"received: \" + messageDat)\n    }\n\n\n    enterRoom = () => {\n        const username = this.state.name;\n        this.topic = `/app/game/${this.state.room}`;\n        if (this.currentSubscription) {\n            this.currentSubscription.unsubscribe();\n        }\n        this.currentSubscription = this.stompClient.subscribe(`/topic/${this.state.room}`, this.onMessageReceived);\n\n        this.stompClient.send(`${this.topic}/addUser`, {}, JSON.stringify({sender: username, type: 'JOIN'}));\n        this.setState({isConnected: true})\n\n    }\n\n\n    leaveRoom = async () => {\n        try {\n            const leaveRoomResponse = await fetch(`/game-room/leave`,\n                {\n                    method: \"post\",\n                    headers: {\n                        Authorization: \"Bearer \" + localStorage.getItem(\"user\"),\n                        \"Content-Type\": \"application/json\"\n                    }\n                })\n        } catch (e) {\n            console.log('Error leaving room!');\n            console.log(e);\n        }\n    }\n\n    disconnect = (event) => {\n        if (this.stompClient !== null) {\n            this.leaveRoom();\n            console.log(\"left room\");\n            // Tell your username to the server\n            this.currentSubscription = this.stompClient.subscribe(`/topic/${this.state.room}`, this.onMessageReceived);\n\n            this.stompClient.send(`${this.topic}/addUser`, {}, JSON.stringify({\n                sender: this.state.name,\n                type: 'LEAVE'\n            }));\n            this.setState({isConnected: false})\n            this.stompClient.disconnect({});\n        }\n        event.preventDefault();\n\n    }\n\n\n    canvasWidth = 800;\n    canvasHeight = 800;\n    goUp;\n    goDown;\n\n    ball = {\n        ballX: Math.floor(Math.random() * 300) + 50,\n        ballY: 50,\n        diameter: 50,\n        ballVx: 5,\n        ballVy: 7,\n        canvasWidth: null,\n        canvasHeight: null,\n        p: null,\n        moveAndDraw: function () {\n            this.p.fill(255, 0, 255);\n            this.p.ellipse(this.ballX, this.ballY, this.diameter, this.diameter);\n            this.p.fill('#FFFFFF');\n\n            this.ballX += this.ballVx;\n            this.ballY += this.ballVy;\n            if (this.ballX < this.diameter * 0.5 || this.ballX > this.canvasWidth - this.diameter * 0.5) {\n                this.ballVx *= -1;\n            }\n            if (this.ballY < this.diameter * 0.5 || this.ballY > this.canvasHeight - this.diameter * 0.5) {\n                this.ballVy *= -1;\n            }\n        }\n\n    }\n\n    paddle = {\n        paddleWidth: 20,\n        paddleHeight: 150,\n        paddleX: 20,\n        paddleY: 0,\n        canvasWidth: null,\n        isPlayer2: false,\n        p: null,\n        drawPaddle: function () {\n            if (!this.isPlayer2) {\n                this.p.fill(255);\n                this.p.rect(this.paddleX, this.paddleY, this.paddleWidth, this.paddleHeight);\n            } else {\n                this.p.fill(255);\n                this.p.rect(this.canvasWidth - 2 * this.paddleWidth, this.paddleY, this.paddleWidth, this.paddleHeight);\n            }\n\n        }\n    }\n\n\n    ball = Object.create(this.ball,\n        {\n            canvasWidth:\n                {value: this.canvasWidth},\n            canvasHeight:\n                {value: this.canvasHeight},\n            p:\n                {value: this.p}\n        }\n    );\n\n    paddle1 = Object.create(this.paddle,\n        {\n            canvasWidth:\n                {value: this.canvasWidth},\n            isPlayer2:\n                {value: false},\n            p:\n                {value: this.p}\n        });\n\n    paddle2 = Object.create(this.paddle,\n        {\n            canvasWidth:\n                {value: this.canvasWidth},\n            isPlayer2:\n                {value: true},\n            p:\n                {value: this.p}\n        });\n\n    setup = (p5, parent) => {\n        this.p.createCanvas(this.canvasWidth, this.canvasHeight).parent(parent);\n        this.p.frameRate(60);\n    }\n\n    updateMovements = (messageContent) => {\n        const data = JSON.parse(messageContent.content);\n        this.paddle1.paddleY = data.paddle1Y;\n        this.paddle2.paddleY = data.paddle2Y;\n        this.ball.ballX = data.ballX;\n        this.ball.ballY = data.ballY;\n        this.ball.ballVx = data.ballVy;\n    }\n\n    sendMovements = () => {\n        if (this.goUp === 1) {\n            if (!this.state.isPlayer2) {\n                this.paddle1.paddleY -= 10;\n            } else {\n                this.paddle2.paddleY -= 10;\n            }\n        }\n        if (this.goDown === 1) {\n            if (!this.state.isPlayer2) {\n                this.paddle1.paddleY += 10;\n            } else {\n                this.paddle2.paddleY += 10;\n            }\n        }\n        if ((this.paddle1.paddleY + this.paddle1.paddleHeight) > this.canvasHeight) {\n            this.paddle1.paddleY = this.canvasHeight - this.paddle1.paddleHeight;\n        }\n        if (this.paddle1.paddleY < 0) {\n            this.paddle1.paddleY = 0;\n        }\n        if ((this.ball.ballY > this.paddle1.paddleY && this.ball.ballY < this.paddle1.paddleY + this.paddle1.paddleHeight) && (this.ball.ballX - this.ball.diameter / 2 <= 40)) {\n            this.ball.ballVx *= -1;\n        }\n        const data = {\n            sender: this.state.sender,\n            content: JSON.stringify({\n                paddle1Y: this.paddle1.paddleY,\n                paddle2Y: this.paddle2.paddleY,\n                ballX: this.ball.ballX,\n                ballY: this.ball.ballY,\n                ballVx: this.ball.ballVx\n            }),\n            type: 'CHAT'\n        }\n        //send data code below\n        this.stompClient.send(`${this.topic}/sendMessage`, {}, JSON.stringify(data));\n        if(this.state.hasBothPlayers){\n        this.ball.moveAndDraw();\n        this.paddle1.drawPaddle()\n        this.paddle2.drawPaddle()}\n\n    }\n\n    draw = (p5) => {\n        this.p.background(51);\n        this.sendMovements();\n\n    }\n\n    keyPressed = (p5) => {\n        if (this.p.keyCode === this.p.UP_ARROW) {\n            this.goUp = 1;\n\n        }\n        if (this.p.keyCode === this.p.DOWN_ARROW) {\n            this.goDown = 1;\n\n        }\n    }\n\n    keyReleased = (p5) => {\n        if (this.p.keyCode === this.p.UP_ARROW) {\n            this.goUp = 0;\n        }\n        if (this.p.keyCode === this.p.DOWN_ARROW) {\n            this.goDown = 0;\n        }\n\n    }\n\n    render() {\n        const form = (\n            <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh'}}>\n                <CreateRoom setUserAndRoom={this.setUserAndRoom}/>\n            </div>\n        )\n        const loading = (\n            <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh'}}>\n                <CircularProgress/>\n            </div>\n        )\n\n        const canvas = (\n            <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh'}}>\n                {/*<P5Wrapper sketch={this.sketch} />*/}\n                <Sketch setup={this.setup} draw={this.draw} keyPressed={this.keyPressed}\n                        keyReleased={this.keyReleased}/>\n\n            </div>\n        )\n        // return canvas;\n        return (this.state.showForm ? form : (this.state.isConnected) ? canvas : loading)\n\n    }\n\n}\n\nexport default PongWithFriends;","import React, { Component } from \"react\";\nimport styled from 'styled-components';\n\nconst sliderThumbStyles = (props) => (`\n  width: 25px;\n  height: 25px;\n  background: ${props.color};\n  cursor: pointer;\n  outline: 5px solid #333;\n  -webkit-transition: .2s;\n  transition: opacity .2s;\n`);\n\n\nconst Styles = styled.div`\n  display: flex;\n  align-items: center;\n  color: #888;\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n  .value {\n    flex: 1;\n    font-size: 2rem;\n  }\n  .slider {\n    flex: 1;\n    -webkit-appearance: none;\n    width: 100%;\n    height: 15px;\n    border-radius: 5px;\n    background: #efefef;\n    outline: none;\n    &::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      appearance: none;\n      ${props => sliderThumbStyles(props)}\n    }\n    &::-moz-range-thumb {\n      ${props => sliderThumbStyles(props)}\n    }\n  }\n`;\n\nclass Slider extends Component{\n    state = {\n        value: 50\n    }\n\n    handleChange = (e) => {\n        // this.value = e.target.value\n        this.setState({value: e.target.value})\n    }\n\n    render() {\n        return (\n            <Styles color = {this.props.color}>\n                <input type='range' min={0} max={1000} className='slider' onChange={this.handleChange}/>\n                <div className=\"value\">{this.state.value}</div>\n            </Styles>\n        )\n    }\n}\n\nexport default Slider;","import React, {Component} from \"react\";\nimport {HashRouter as Router, Switch, Route} from 'react-router-dom';\nimport DrawWithFriends from \"./sketches/DrawWithFriends\"\nimport Login from \"./components/Login\";\nimport CreateRoom from \"./components/CreateRoom\";\nimport PongWithFriends from \"./sketches/PongWithFriends\";\nimport Slider from \"./components/Slider\";\n\nclass App extends Component {\n\n    render() {\n        return (\n            <Router>\n                <div>\n                    <Switch>\n                       <Route exact path='/' component={Login}/>\n                       <Route path='/draw-wf' component={DrawWithFriends}/>\n                    {/*    /!*<Route path='/pong-wf' component={PongWithFriends}/>*!/*/}\n                    {/*    <Route path='/rooms' component={CreateRoom}/>*/}\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}